// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/Futturi/vktest/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockAuthService) ParseToken(token string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthServiceMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthService)(nil).ParseToken), token)
}

// SignIn mocks base method.
func (m *MockAuthService) SignIn(User models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", User)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceMockRecorder) SignIn(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthService)(nil).SignIn), User)
}

// SignInAdmin mocks base method.
func (m *MockAuthService) SignInAdmin(Admin models.Admin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInAdmin", Admin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInAdmin indicates an expected call of SignInAdmin.
func (mr *MockAuthServiceMockRecorder) SignInAdmin(Admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInAdmin", reflect.TypeOf((*MockAuthService)(nil).SignInAdmin), Admin)
}

// SignUp mocks base method.
func (m *MockAuthService) SignUp(User models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", User)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceMockRecorder) SignUp(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthService)(nil).SignUp), User)
}

// SignUpAdmin mocks base method.
func (m *MockAuthService) SignUpAdmin(Admin models.Admin) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpAdmin", Admin)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpAdmin indicates an expected call of SignUpAdmin.
func (mr *MockAuthServiceMockRecorder) SignUpAdmin(Admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpAdmin", reflect.TypeOf((*MockAuthService)(nil).SignUpAdmin), Admin)
}

// MockActorService is a mock of ActorService interface.
type MockActorService struct {
	ctrl     *gomock.Controller
	recorder *MockActorServiceMockRecorder
}

// MockActorServiceMockRecorder is the mock recorder for MockActorService.
type MockActorServiceMockRecorder struct {
	mock *MockActorService
}

// NewMockActorService creates a new mock instance.
func NewMockActorService(ctrl *gomock.Controller) *MockActorService {
	mock := &MockActorService{ctrl: ctrl}
	mock.recorder = &MockActorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorService) EXPECT() *MockActorServiceMockRecorder {
	return m.recorder
}

// DeleteActor mocks base method.
func (m *MockActorService) DeleteActor(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorServiceMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorService)(nil).DeleteActor), id)
}

// GetActors mocks base method.
func (m *MockActorService) GetActors() ([]models.ActorSelect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]models.ActorSelect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorServiceMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorService)(nil).GetActors))
}

// InsertActor mocks base method.
func (m *MockActorService) InsertActor(actor models.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertActor indicates an expected call of InsertActor.
func (mr *MockActorServiceMockRecorder) InsertActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertActor", reflect.TypeOf((*MockActorService)(nil).InsertActor), actor)
}

// UpdateActor mocks base method.
func (m *MockActorService) UpdateActor(id int, actor models.ActorUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", id, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorServiceMockRecorder) UpdateActor(id, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorService)(nil).UpdateActor), id, actor)
}

// MockCinemaService is a mock of CinemaService interface.
type MockCinemaService struct {
	ctrl     *gomock.Controller
	recorder *MockCinemaServiceMockRecorder
}

// MockCinemaServiceMockRecorder is the mock recorder for MockCinemaService.
type MockCinemaServiceMockRecorder struct {
	mock *MockCinemaService
}

// NewMockCinemaService creates a new mock instance.
func NewMockCinemaService(ctrl *gomock.Controller) *MockCinemaService {
	mock := &MockCinemaService{ctrl: ctrl}
	mock.recorder = &MockCinemaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCinemaService) EXPECT() *MockCinemaServiceMockRecorder {
	return m.recorder
}

// DeleteFilm mocks base method.
func (m *MockCinemaService) DeleteFilm(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockCinemaServiceMockRecorder) DeleteFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockCinemaService)(nil).DeleteFilm), id)
}

// GetCinemas mocks base method.
func (m *MockCinemaService) GetCinemas(sor string) ([]models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCinemas", sor)
	ret0, _ := ret[0].([]models.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCinemas indicates an expected call of GetCinemas.
func (mr *MockCinemaServiceMockRecorder) GetCinemas(sor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCinemas", reflect.TypeOf((*MockCinemaService)(nil).GetCinemas), sor)
}

// InsertCinema mocks base method.
func (m *MockCinemaService) InsertCinema(cinema models.Cinema) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCinema", cinema)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCinema indicates an expected call of InsertCinema.
func (mr *MockCinemaServiceMockRecorder) InsertCinema(cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCinema", reflect.TypeOf((*MockCinemaService)(nil).InsertCinema), cinema)
}

// Search mocks base method.
func (m *MockCinemaService) Search(search models.Search) ([]models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", search)
	ret0, _ := ret[0].([]models.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCinemaServiceMockRecorder) Search(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCinemaService)(nil).Search), search)
}

// UpdateFilm mocks base method.
func (m *MockCinemaService) UpdateFilm(id string, cinema models.CinemaUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", id, cinema)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockCinemaServiceMockRecorder) UpdateFilm(id, cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockCinemaService)(nil).UpdateFilm), id, cinema)
}
