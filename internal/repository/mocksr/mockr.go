// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/Futturi/vktest/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthorization) SignIn(User models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", User)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationMockRecorder) SignIn(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorization)(nil).SignIn), User)
}

// SignInAdmin mocks base method.
func (m *MockAuthorization) SignInAdmin(Admin models.Admin) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInAdmin", Admin)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInAdmin indicates an expected call of SignInAdmin.
func (mr *MockAuthorizationMockRecorder) SignInAdmin(Admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInAdmin", reflect.TypeOf((*MockAuthorization)(nil).SignInAdmin), Admin)
}

// SignUp mocks base method.
func (m *MockAuthorization) SignUp(User models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", User)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthorizationMockRecorder) SignUp(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthorization)(nil).SignUp), User)
}

// SignUpAdmin mocks base method.
func (m *MockAuthorization) SignUpAdmin(Admin models.Admin) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpAdmin", Admin)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpAdmin indicates an expected call of SignUpAdmin.
func (mr *MockAuthorizationMockRecorder) SignUpAdmin(Admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpAdmin", reflect.TypeOf((*MockAuthorization)(nil).SignUpAdmin), Admin)
}

// MockActorRepo is a mock of ActorRepo interface.
type MockActorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockActorRepoMockRecorder
}

// MockActorRepoMockRecorder is the mock recorder for MockActorRepo.
type MockActorRepoMockRecorder struct {
	mock *MockActorRepo
}

// NewMockActorRepo creates a new mock instance.
func NewMockActorRepo(ctrl *gomock.Controller) *MockActorRepo {
	mock := &MockActorRepo{ctrl: ctrl}
	mock.recorder = &MockActorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorRepo) EXPECT() *MockActorRepoMockRecorder {
	return m.recorder
}

// DeleteActor mocks base method.
func (m *MockActorRepo) DeleteActor(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorRepoMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorRepo)(nil).DeleteActor), id)
}

// GetActors mocks base method.
func (m *MockActorRepo) GetActors() ([]models.ActorSelect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]models.ActorSelect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorRepoMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorRepo)(nil).GetActors))
}

// InsertActor mocks base method.
func (m *MockActorRepo) InsertActor(actor models.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertActor indicates an expected call of InsertActor.
func (mr *MockActorRepoMockRecorder) InsertActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertActor", reflect.TypeOf((*MockActorRepo)(nil).InsertActor), actor)
}

// UpdateActor mocks base method.
func (m *MockActorRepo) UpdateActor(id int, actor models.ActorUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", id, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorRepoMockRecorder) UpdateActor(id, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorRepo)(nil).UpdateActor), id, actor)
}

// MockCinemaRepo is a mock of CinemaRepo interface.
type MockCinemaRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCinemaRepoMockRecorder
}

// MockCinemaRepoMockRecorder is the mock recorder for MockCinemaRepo.
type MockCinemaRepoMockRecorder struct {
	mock *MockCinemaRepo
}

// NewMockCinemaRepo creates a new mock instance.
func NewMockCinemaRepo(ctrl *gomock.Controller) *MockCinemaRepo {
	mock := &MockCinemaRepo{ctrl: ctrl}
	mock.recorder = &MockCinemaRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCinemaRepo) EXPECT() *MockCinemaRepoMockRecorder {
	return m.recorder
}

// DeleteFilm mocks base method.
func (m *MockCinemaRepo) DeleteFilm(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockCinemaRepoMockRecorder) DeleteFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockCinemaRepo)(nil).DeleteFilm), id)
}

// GetCinemas mocks base method.
func (m *MockCinemaRepo) GetCinemas(sor string) ([]models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCinemas", sor)
	ret0, _ := ret[0].([]models.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCinemas indicates an expected call of GetCinemas.
func (mr *MockCinemaRepoMockRecorder) GetCinemas(sor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCinemas", reflect.TypeOf((*MockCinemaRepo)(nil).GetCinemas), sor)
}

// InsertCinema mocks base method.
func (m *MockCinemaRepo) InsertCinema(cinema models.Cinema) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCinema", cinema)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCinema indicates an expected call of InsertCinema.
func (mr *MockCinemaRepoMockRecorder) InsertCinema(cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCinema", reflect.TypeOf((*MockCinemaRepo)(nil).InsertCinema), cinema)
}

// Search mocks base method.
func (m *MockCinemaRepo) Search(search models.Search) ([]models.Cinema, []models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", search)
	ret0, _ := ret[0].([]models.Cinema)
	ret1, _ := ret[1].([]models.Cinema)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *MockCinemaRepoMockRecorder) Search(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCinemaRepo)(nil).Search), search)
}

// Unification mocks base method.
func (m *MockCinemaRepo) Unification(hash map[string]int) ([]models.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unification", hash)
	ret0, _ := ret[0].([]models.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unification indicates an expected call of Unification.
func (mr *MockCinemaRepoMockRecorder) Unification(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unification", reflect.TypeOf((*MockCinemaRepo)(nil).Unification), hash)
}

// UpdateFilm mocks base method.
func (m *MockCinemaRepo) UpdateFilm(id string, cinema models.CinemaUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", id, cinema)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockCinemaRepoMockRecorder) UpdateFilm(id, cinema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockCinemaRepo)(nil).UpdateFilm), id, cinema)
}
